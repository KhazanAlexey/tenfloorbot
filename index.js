const TelegramApi = require('node-telegram-bot-api');
const moment = require('moment-timezone');
const schedule = require('node-schedule');
const variants = require("./const");

const { GoogleGenerativeAI } = require("@google/generative-ai");
require('dotenv').config();

const genAI = new GoogleGenerativeAI("AIzaSyDEpA0G-pXtmWJKFP9FUYM1rGrFgbSmn6g");
const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramApi(token, { polling: true });

let scheduledJob = {};
let voteReminder = {};
let chatHistory = {};

const minskTimeForPoll = '9:45';
const minskTimeForReminder = '14:00';

const mainMenuKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏' }]
        ],
        resize_keyboard: true
    }
};

const usefulLinksKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'Confluence IT Help', url: 'https://confluence.aventus.work/display/IT/Workspace+setup' }],
            [{ text: 'PeopleForce', url: 'https://aventusit.peopleforce.io/dashboards' }],
            [{ text: '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', url: 'https://payoff.1c.avgr.it/ru/' }],
            [{ text: 'Jira', url: 'https://jira.aventus.work/secure/Dashboard.jspa' }]
        ]
    }
};

const startPoll = async (chatId) => {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);

    const options = { weekday: 'long', day: 'numeric', month: 'numeric' };
    const formattedDate = tomorrow.toLocaleDateString('ru-RU', options);

    const question = `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±–µ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${formattedDate}):`;
    await bot.sendPoll(chatId, question, [variants.var1, variants.var2, variants.var3], { is_anonymous: false });
};

const schedulePoll = (chatId) => {
    cancelNextPoll(chatId);

    const serverTimeForPoll = moment.tz(minskTimeForPoll, 'HH:mm', 'Europe/Minsk').tz(moment.tz.guess()).format('HH:mm').split(':');
    const serverTimeForReminder = moment.tz(minskTimeForReminder, 'HH:mm', 'Europe/Minsk').tz(moment.tz.guess()).format('HH:mm').split(':');

    scheduledJob[chatId] = schedule.scheduleJob(`0 ${serverTimeForPoll[1]} ${serverTimeForPoll[0]} * * 2,4`, async () => {
        await startPoll(chatId);
    });
    voteReminder[chatId] = schedule.scheduleJob(`0 ${serverTimeForReminder[1]} ${serverTimeForReminder[0]} * * 2,4`, async () => {
        await bot.sendMessage(chatId, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –ø–æ –æ–±–µ–¥–∞–º. –û–ø—Ä–æ—Å –±—ã–ª –æ–ø—Ä—É–±–ª–∏–∫–æ–≤–∞–Ω —Å–µ–≥–æ–¥–Ω—è –≤ ${minskTimeForPoll}`);
    });
};

const getNextPollTime = (chatId) => {
    if (scheduledJob[chatId]) {
        const nextInvocation = scheduledJob[chatId].nextInvocation();
        moment.locale('ru');

        const minskTime = moment(new Date(nextInvocation)).tz('Europe/Minsk').format('dddd, YYYY-MM-DD HH:mm:ss');
        return `${minskTime}`;
    }
    return '–û–ø—Ä–æ—Å –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω. –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start@ten_floor_bot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é';
};

const cancelNextPoll = (chatId) => {
    if (scheduledJob[chatId]) {
        scheduledJob[chatId].cancel();
        scheduledJob[chatId] = null;
    }
    if (voteReminder[chatId]) {
        voteReminder[chatId].cancel();
        voteReminder[chatId] = null;
    }
};

const sendWelcomeMessage = async (chatId, username) => {
    const welcomeText = `–ü—Ä–∏–≤–µ—Ç${username ? `, ${username}` : ''}! üëã\n–Ø –±–æ—Ç, –∂–∏–≤—É –Ω–∞ –¢—É—á–∏–Ω—Å–∫–∏–π –ø–µ—Ä—É–ª–æ–∫ 2–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
    await bot.sendMessage(chatId, welcomeText, mainMenuKeyboard);
};

const getAllScheduledPolls = () => {
    const allSchedules = {};
    for (const [chatId, job] of Object.entries(scheduledJob)) {
        if (job) {
            const nextInvocation = job.nextInvocation();
            if (nextInvocation) {
                allSchedules[chatId] = {
                    nextPoll: moment(new Date(nextInvocation)).tz('Europe/Minsk').format('YYYY-MM-DD HH:mm:ss'),
                    reminder: voteReminder[chatId] ? moment(new Date(voteReminder[chatId].nextInvocation())).tz('Europe/Minsk').format('YYYY-MM-DD HH:mm:ss') : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
                };
            }
        }
    }
    return allSchedules;
};

const handleAdminScheduleView = async (msg) => {
    const chatId = msg.chat.id;

    if (msg.chat.type === 'private' &&
        msg.text === '/admin_schedule' &&
        msg.from.username === 'AlexeyGrom') {

        const schedules = getAllScheduledPolls();

        if (Object.keys(schedules).length === 0) {
            return bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.');
        }

        let message = 'üìä *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º:*\n\n';

        for (const [groupId, schedule] of Object.entries(schedules)) {
            try {
                const chat = await bot.getChat(groupId);
                message += `*–ß–∞—Ç:* ${chat.title || groupId}\n`;
                message += `‚îú –°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å: ${schedule.nextPoll}\n`;
                message += `‚îî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${schedule.reminder}\n\n`;
            } catch (error) {
                message += `*–ß–∞—Ç ID:* ${groupId}\n`;
                message += `‚îú –°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å: ${schedule.nextPoll}\n`;
                message += `‚îî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${schedule.reminder}\n\n`;
            }
        }

        return bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    }
};


const handleSpeakOutCommand = async (chatId) => {
    const TEN_MINUTES = 7 * 60 * 1000; // 7 minutes in milliseconds
    const messages = chatHistory[chatId] || [];

    // Filter messages
    const filteredMessages = [];
    for (let i = 0; i < messages.length - 1; i++) {
        const currentMessage = messages[i];
        const nextMessage = messages[i + 1];

        const timeDifference = new Date(nextMessage.timestamp).getTime() - new Date(currentMessage.timestamp).getTime();
        const containsBotCommand = currentMessage?.message?.includes('/') || currentMessage?.message?.includes('@NewCustom0Bot') || currentMessage?.message?.includes('@ten_floor_bot');

        if (timeDifference <= TEN_MINUTES && !containsBotCommand) {
            filteredMessages.push(currentMessage);
        }
    }

    const context = filteredMessages.map(entry => `${entry.timestamp} - ${entry.message}`).join('\n');

    // const result = await model.generateContent(`${context} –ü—Ä–æ–¥–æ–ª–∂–∏ –¥–∏–∞–ª–æ–≥ –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, –æ—Ç–≤–µ—á–∞–π –Ω–µ —Å–æ–±–ª—é–¥–∞—è —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ª–æ–≥–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π '—è:'`);
    //
    //   bot.sendMessage(chatId, result.response.text());

    botSay(chatId,context)
};

const botSay =async (chatId,message) => {
    const result = await model.generateContent(`${message} –ü—Ä–æ–¥–æ–ª–∂–∏ –¥–∏–∞–ª–æ–≥ –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, –æ—Ç–≤–µ—á–∞–π –Ω–µ —Å–æ–±–ª—é–¥–∞—è —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ª–æ–≥–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π '—è:'`);

    bot.sendMessage(chatId, result.response.text());
}


const start = async () => {
    await bot.deleteMyCommands({ scope: { type: 'all_private_chats' } });

    await bot.setMyCommands([
        { command: '/start', description: `–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ä–µ–¥–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º –≤ ${minskTimeForPoll}` },
        { command: '/obed', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –ø–æ –æ–±–µ–¥–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –µ–¥–∏–Ω–æ–∂–¥—ã' },
        { command: '/cancel_obed', description: '–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞' },
        { command: '/when_next_obed', description: '–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞' },
        { command: '/say', description: '–ü–æ–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è' }
    ], { scope: { type: 'all_group_chats' } });

    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;

        if (!chatHistory[chatId]) {
            chatHistory[chatId] = [];
        }

        // Exclude messages with photos, videos, or animations
        if (msg.photo || msg.video || msg.animation) {
            return;
        }
        // Convert Unix timestamp to human-readable format
        const timestamp = moment.unix(msg.date).format('YYYY-MM-DD HH:mm:ss');
        const userName = msg.from.username || msg.from.first_name;
        chatHistory[chatId].push({ message: `${userName}: ${text}`, timestamp });

        // Keep only the last 20 messages
        if (chatHistory[chatId].length > 30) {
            chatHistory[chatId].shift();
        }
        try {
            await handleAdminScheduleView(msg);

            if (msg.chat.type === 'private') {
                if (text === '/start') {
                    return sendWelcomeMessage(chatId, msg.from.first_name);
                }

                if (text === '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏') {
                    return bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:', usefulLinksKeyboard);
                }

                return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', mainMenuKeyboard);
            }

            if (msg?.reply_to_message?.from?.username==='NewCustom0Bot'||
                msg?.reply_to_message?.from?.username==='ten_floor_bot'||
                text.startsWith('@ten_floor_bot') || text.startsWith('@NewCustom0Bot')) {
                return botSay(chatId,text);
            }

            if (text === '/say@ten_floor_bot' || text === '/say@NewCustom0Bot') {
                return handleSpeakOutCommand(chatId, text);
            }

            const restrictedCommands = ['/start@ten_floor_bot', '/obed@ten_floor_bot', '/cancel_obed@ten_floor_bot'];
            if (restrictedCommands.includes(text)) {
                const chatMember = await bot.getChatMember(chatId, msg.from.id);
                const isAdmin = chatMember.status === 'administrator' || chatMember.status === 'creator';
                const isAllowedUser = msg.from.username === 'AlexeyGrom';

                if (!isAdmin && !isAllowedUser) {
                    return bot.sendMessage(chatId, `–ü—Ä–æ—Å—Ç–∏ ${msg.from.first_name}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.`);
                }
            }

            if (text === '/start@ten_floor_bot' || text === "/start@NewCustom0Bot") {
                schedulePoll(chatId);
                const nextPollTime = getNextPollTime(chatId);
                return bot.sendMessage(chatId, `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${nextPollTime}`);
            }

            if (text === '/obed@ten_floor_bot') {
                bot.sendMessage(chatId, `–û–ø—Ä–æ—Å –±—ã–ª –∑–∞–ø—É—â–µ–Ω: ${msg.from.first_name}`);
                return startPoll(chatId);
            }

            if (text === '/cancel_obed@ten_floor_bot') {
                cancelNextPoll(chatId);
                return bot.sendMessage(chatId, '–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ—Ç–º–µ–Ω–µ–Ω.');
            }

            if (text === '/when_next_obed@ten_floor_bot' || text === '/when_next_obed@NewCustom0Bot') {
                const nextPollTime = getNextPollTime(chatId);
                return bot.sendMessage(chatId, `–°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${nextPollTime}`);
            }

        } catch (e) {
            return bot.sendMessage(chatId, '–Ø —É—Å—Ç–∞–ª, –ø–æ–≥–æ–≤–æ—Ä–∏–º –∑–∞–≤—Ç—Ä–∞!)');
        }
    });
};

start();
